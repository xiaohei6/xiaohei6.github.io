<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OJ搭建记录</title>
    <link href="/2020/10/26/OJ%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/10/26/OJ%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="记录一次通过青岛OJ开源平台搭建自己的oj"><a href="#记录一次通过青岛OJ开源平台搭建自己的oj" class="headerlink" title="记录一次通过青岛OJ开源平台搭建自己的oj"></a>记录一次通过青岛OJ开源平台搭建自己的oj</h1><p>​      为什么要搭建oj？在各种平台刷题过于无聊了，想要和其他人一起分享自己喜欢的题，同时因为以前用过青岛OJ进行考核，搭建和部署比较简单，自然想搭建一个来玩玩，于是去请教ZY大大。🆗多的不说，开干！</p><h2 id="1-一些必备的网站"><a href="#1-一些必备的网站" class="headerlink" title="1.一些必备的网站"></a>1.一些必备的网站</h2><p>   1.github地址：<a href="https://github.com/QingdaoU/OnlineJudge/blob/master/README-CN.md">https://github.com/QingdaoU/OnlineJudge/blob/master/README-CN.md</a></p><p>   2.官方文档：<a href="https://docs.onlinejudge.me/#/onlinejudge/guide/using_cdn">https://docs.onlinejudge.me/#/onlinejudge/guide/using_cdn</a></p><p>   3.阿里云：<a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p><h2 id="2-首先我们需要在阿里云购买一台云服务器，作者是白嫖的学生服务器随软不是最强的但是用来搭建我们的OJ已经足够了"><a href="#2-首先我们需要在阿里云购买一台云服务器，作者是白嫖的学生服务器随软不是最强的但是用来搭建我们的OJ已经足够了" class="headerlink" title="2.首先我们需要在阿里云购买一台云服务器，作者是白嫖的学生服务器随软不是最强的但是用来搭建我们的OJ已经足够了"></a>2.首先我们需要在阿里云购买一台云服务器，作者是白嫖的学生服务器随软不是最强的但是用来搭建我们的OJ已经足够了</h2><p>​    获得云服务器后我们需要登陆阿里云控制台对他进行一些基础的设置</p><p>​        （1）打开旁边的控制选项</p><p>​                <img src="https://i.loli.net/2021/01/10/rGk1qXpdChsJT4Q.png" alt="image-20210110232220266"></p><p>选择云服务器ECS这个时候我们就可以看见我们的远端云服务器概况了</p><p>​        （2）接着我们选择旁边的实例</p><p><img src="https://i.loli.net/2021/01/10/N1yVAUBamWjdtZK.png" alt="image-20210110232426361"></p><p>会看见这种情况我们不必着急不是我们的云服务器不见了而是我们的地域没有正确选择，所以只需要如下操作:</p><p><img src="https://i.loli.net/2021/01/10/BAQn92zJTckDUVt.png" alt="image-20210110232652386"></p><p>接着我们就可以看见自己的实例了：</p><p><img src="https://i.loli.net/2021/01/10/WeTlL4sNuHAcz7P.png" alt="image-20210110232743738"></p><p>​            （3）安全组配置</p><p><img src="https://i.loli.net/2021/01/10/M5REyLfwak31enX.png" alt="image-20210110232843622"></p><p>配置规则：</p><p>建议先回到旧版</p><p><img src="https://i.loli.net/2021/01/09/vst3dJCp1qmTl6Y.png" alt="image-20210109224000186"></p><p>添加安全规则</p><p><img src="https://i.loli.net/2021/01/09/vXO3oJT5FaNMtd2.png" alt="image-20210109224606074"></p><p><img src="https://i.loli.net/2021/01/09/oLar5d2wN8Ex6yj.png" alt="9"></p><p><img src="https://i.loli.net/2021/01/09/6bykP9O3DVLtgrC.png" alt="image-20210109224634776"></p><p><img src="https://i.loli.net/2021/01/09/UnucNbEGjsemzg1.png" alt="image-20210109224747682"></p><p>网络配置好以后我们还需要重置一下远程登陆密码</p><p><img src="https://i.loli.net/2021/01/09/rzIFCcmypgT47u6.png" alt="image-20210109225137337"></p><p>重置一下实例密码</p><p><img src="https://i.loli.net/2021/01/09/rR47ocSEO9dMKAh.png" alt="image-20210109225831694"></p><p>运用远程连接我们就可以进入云服务器了</p><p><img src="https://i.loli.net/2021/01/09/wcjzXmaFKBQ18GY.png" alt="image-20210109225945510"></p><p>然后就可以开始我们的OJ搭建了</p><p>我们用的是青岛OJ比较简单</p><p>首先执行下面的命令安装对应的依赖环境</p><p>ubuntu系统用户：</p><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span> &amp;&amp; sudo apt-<span class="hljs-built_in">get</span> install -<span class="hljs-keyword">y</span> <span class="hljs-keyword">vim</span> <span class="hljs-keyword">python</span>-pip curl gitpip install docker-compose</code></pre><p>centos系统用户：</p><pre><code class="hljs sql">yum <span class="hljs-keyword">update</span> &amp;&amp; yum <span class="hljs-keyword">install</span> -y vim python-pip curl gitpip <span class="hljs-keyword">install</span> docker-compose</code></pre><p>在控制台输入密码登陆虚拟机然后执行以上对应的命令行</p><p>注：如果是centos8那么我们的python-pip是没有效果的</p><p>因为在centos8中已经更新为pip3命令所以我们需要执行</p><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install python<span class="hljs-number">3</span>-pip</code></pre><p>在安装docker也会遇见一些问题建议参考一下文章安装docker</p><p><a href="https://docsxyz.com/wiki/docker/install">https://docsxyz.com/wiki/docker/install</a></p><p>所以综上所述我们选择比较老一些版本的centos更好，比如说centos7</p><p>如果这些环境都已经安装好啦我们就可以开始执行下面的操作了</p><p>安装：</p><p>1.克隆源码：</p><pre><code class="hljs awk">git clone -b2.<span class="hljs-number">0</span>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/QingdaoU/</span>OnlineJudgeDeploy.git &amp;&amp; cd OnlineJudgeDeploy</code></pre><p>2.启动docker</p><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span></code></pre><p>可能遇到的问题：ERROR: Couldn’t connect to Docker daemon at <a href="https://links.jianshu.com/go?to=http+docker://localunixsocket">http+docker://localunixsocket</a> - is it running?</p><p>解决办法: 运行命令<code>sudo systemctl start docker</code>启动docker(若无效请查看<a href="https://links.jianshu.com/go?to=https://www.awaimai.com/2587.html">参考资料</a>按照对应情况排查)</p><p>这里可能需要等待一定的时间</p><p>4.运行OJ系统</p><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps -a</span></code></pre><p>5.修改端口</p><p>80和443端口可能被占用了</p><p>vim docker-compose.yml</p><p>端口号在最下面</p><p>修改值可以随意只要不是原来的端口就可以了至此我们的OJ就基本搭建完成了</p><p>6.如何访问呢？</p><p>打开我们的浏览器输入云服务器公共ip然后就可以访问了</p><p>登陆root用户 直接在我们ip后面加上\admin回车就可以访问了初始用户名和密码分别是root和rootroot</p><p>例如，ip是185.12.254.40，第四步骤设置的其中一个端口是1000</p><p>则通过<code>185.12.254.40:1000</code>访问首页</p><p>``185.12.254.40:1000/admin`访问管理员帐号</p>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python的十个快捷技巧</title>
    <link href="/2020/10/12/python%E7%9A%84%E5%87%A0%E4%B8%AA%E5%BF%AB%E6%8D%B7%E6%8A%80%E5%B7%A7/"/>
    <url>/2020/10/12/python%E7%9A%84%E5%87%A0%E4%B8%AA%E5%BF%AB%E6%8D%B7%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="python的几个编程技巧"><a href="#python的几个编程技巧" class="headerlink" title="python的几个编程技巧"></a>python的几个编程技巧</h1><p>​    通过对python的学习我们会发现python拥有许多优秀的快捷编程技巧，相对于其他的语言，python的简介以及python的作者告诉我们的python之禅，在编写python时用一些技巧将会将我们的代码看起来更加简洁，符合python的设计之意。接下来我将通过代码演示来讲解十个我知道的python编程技巧。</p><h2 id="1-yeild的使用"><a href="#1-yeild的使用" class="headerlink" title="1.yeild的使用"></a>1.yeild的使用</h2><p>我们通过斐波拉切数列看看yeild的强大，代码如下：</p><pre><code class="hljs python"><span class="hljs-comment"># def fibonacci(n):</span><span class="hljs-comment">#   a = 0</span><span class="hljs-comment">#   b = 1</span><span class="hljs-comment">#   nums = []</span><span class="hljs-comment">#   for _ in range(n):</span><span class="hljs-comment">#     nums.append(a)</span><span class="hljs-comment">#     a, b = b , a + b</span><span class="hljs-comment">#   return nums</span><span class="hljs-comment"># yeild 加强美化版</span><span class="hljs-comment"># def fibonacci(n):</span><span class="hljs-comment">#   a = 0</span><span class="hljs-comment">#   b = 1</span><span class="hljs-comment">#   for _ in range(n):</span><span class="hljs-comment">#     yield a</span><span class="hljs-comment">#     a, b = b, a+b</span><span class="hljs-comment">#</span><span class="hljs-comment">#</span><span class="hljs-comment"># for i in fibonacci(10):</span><span class="hljs-comment">#   print(i)</span></code></pre><h2 id="2-列表解析式"><a href="#2-列表解析式" class="headerlink" title="2.列表解析式"></a>2.列表解析式</h2><p>列表解析式主要用于简化遍历操作，通过简单的一行代码将简化几行代码，这样对于代码的简化是很大的进步，虽然这样会减少可读性，不过用好列表生成式将会节约我们不少打字的时间，例子代码如下：</p><pre><code class="hljs python"><span class="hljs-comment"># 列表解析式</span><span class="hljs-comment"># fruit = [&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;, &quot;banana&quot;]</span><span class="hljs-comment"># 将每一个首字母改成大写</span><span class="hljs-comment"># 原方法</span><span class="hljs-comment"># for i in range(len(fruit)):</span><span class="hljs-comment">#   fruit[i] = fruit[i].upper()</span><span class="hljs-comment"># 列表生成式版</span><span class="hljs-comment"># fruit = [x.upper() for x in fruit]</span><span class="hljs-comment"># 筛选</span><span class="hljs-comment"># filtered_friut = []</span><span class="hljs-comment"># for f in fruit:</span><span class="hljs-comment">#   if f.startswith(&quot;a&quot;):</span><span class="hljs-comment">#     filtered_friut.append(f)</span><span class="hljs-comment"># print(filtered_friut)</span><span class="hljs-comment"># 列表解释式版</span><span class="hljs-comment"># filtered_friut = [x for x in fruit if x.startswith(&quot;a&quot;)]</span></code></pre><h2 id="3-enumerate函数的运用"><a href="#3-enumerate函数的运用" class="headerlink" title="3.enumerate函数的运用"></a>3.enumerate函数的运用</h2><p>enumerate函数，主要提高循环的代码简化度，这里就不赘述了，我们直接看代码.</p><pre><code class="hljs python"><span class="hljs-comment"># 循环技巧 enumerate函数</span><span class="hljs-comment"># 按顺序输出水果名字同时得到对应索引值</span><span class="hljs-comment"># 一般方法</span><span class="hljs-comment"># for x in enumerate(fruit):</span><span class="hljs-comment">#   print(x)</span><span class="hljs-comment"># 反向遍历,元素从后往前输出</span><span class="hljs-comment"># for x in enumerate(reversed(fruit)):</span><span class="hljs-comment">#   print(x)</span><span class="hljs-comment"># 按顺序遍历</span><span class="hljs-comment"># for x in enumerate(sorted(fruit)):</span><span class="hljs-comment">#   print(x)</span></code></pre><h2 id="4-字典的合并操作"><a href="#4-字典的合并操作" class="headerlink" title="4. 字典的合并操作"></a>4. 字典的合并操作</h2><p>在两个字典合并的时候我们如果通过遍历每个列表然后再加入一个字典中会写两个遍历而我们用下面的方法只需要简单的几个字符，详情看代码。</p><pre><code class="hljs python"><span class="hljs-comment"># 字典的合并操作</span><span class="hljs-comment"># a = &#123;&quot;ross&quot; : &quot;123456&quot;,&quot;xiaoming&quot;: &quot;abc123&quot;&#125;</span><span class="hljs-comment"># b = &#123;&quot;lilei&quot;: &quot;111111&quot;,&quot;zhangsan&quot;: &quot;12345678&quot;&#125;</span><span class="hljs-comment"># c = &#123;&#125;</span><span class="hljs-comment"># for k in a:</span><span class="hljs-comment">#   c[k] = a[k]</span><span class="hljs-comment"># for k in b:</span><span class="hljs-comment">#   c[k] = b[k]</span><span class="hljs-comment"># print(c)</span><span class="hljs-comment"># 解包简写</span><span class="hljs-comment"># c = &#123;**a, **b&#125;</span></code></pre><h2 id="5-三元运算符"><a href="#5-三元运算符" class="headerlink" title="5.三元运算符"></a>5.三元运算符</h2><p>在python中和Java，c一样拥有三元运算符，但是他们编写的方式却是不相同的</p><p>在python中三元运算符，前面表示最后结果，中间表示条件，最后表示另一个结果，这里运用的if,else的例子，同样我们也可以用其他的条件语句。</p><pre><code class="hljs python"><span class="hljs-comment"># 三元运算符</span><span class="hljs-comment"># score = int(input())</span><span class="hljs-comment"># if score &gt; 60:</span><span class="hljs-comment">#   s = &quot;pass&quot;</span><span class="hljs-comment"># else:</span><span class="hljs-comment">#   s = &quot;fail&quot;</span><span class="hljs-comment">#   print(s)</span><span class="hljs-comment"># s =  &quot;pass&quot; if score &gt; 60 else &quot;fail&quot;</span><span class="hljs-comment"># print(s)</span></code></pre><h2 id="6-序列解包"><a href="#6-序列解包" class="headerlink" title="6. 序列解包"></a>6. 序列解包</h2><p>提醒这里的序列不一定是列表，元组，range同样适用，我们直接看例子</p><pre><code class="hljs python"><span class="hljs-comment"># 序列解包 (注意序列不一定式列表，元组或range)</span><span class="hljs-comment"># 单独提取出姓和名</span><span class="hljs-comment"># name = &quot;san zhang&quot;</span><span class="hljs-comment"># first_name, last_name = name.split()</span></code></pre><h2 id="7-with-语句"><a href="#7-with-语句" class="headerlink" title="7. with 语句"></a>7. with 语句</h2><p>这个技巧我们通常运用在文件读取的程序中，同样直接上例子</p><pre><code class="hljs python"><span class="hljs-comment"># with语句(读取文件内容)</span><span class="hljs-comment"># 一般方法</span><span class="hljs-comment">#  f = open(&quot;somefile.txt&quot;,&quot;r&quot;)</span><span class="hljs-comment">#  s = f.read()</span><span class="hljs-comment">#  f.close() # 这个必须加上避免一直占用该资源</span><span class="hljs-comment"># with方法</span><span class="hljs-comment"># with open(&quot;somefile.txt&quot;, &quot;r&quot;) as f:</span><span class="hljs-comment">#   s = f.read()</span></code></pre><p>​    好啦，这里关于python代码的技巧，我先更新到这儿，关于python有些更加方便更加美化的代码，我们可以去搜索python的魔法语句，这里就不做过多的介绍。</p><p>​    最后感谢您的观看，初次写文章，有很多不足，请见谅，如有错误请留言。</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的++i与i++</title>
    <link href="/2020/09/30/Java%E4%B8%AD%E7%9A%84-i%E4%B8%8Ei/"/>
    <url>/2020/09/30/Java%E4%B8%AD%E7%9A%84-i%E4%B8%8Ei/</url>
    
    <content type="html"><![CDATA[<h1 id="java中i-与-i的区别"><a href="#java中i-与-i的区别" class="headerlink" title="java中i++与++i的区别"></a>java中i++与++i的区别</h1><ul><li><p>这篇文章可能对于大神没什么用，毕竟技术层次不够，大神追求的都是思想层面的东西。但对于一些初学者的话还是有一些用的，或者有跟我一样的已经入行一些时间了，但对这个理解模糊的(IT界估计也就我一个了 ~~捂脸!)都可以参阅学习，我写的比较详细，相信只要你看，就绝对会有收获</p></li><li><pre><code class="java">i++ 和++i<pre><code class="hljs plain">在区分这两个之前，我们先来了解一下它们的运算规则 </code></pre>int i=1,a=0;     * i++ 先赋值在运算,例如 a=i++,先赋值a=i,后运算i=i+1,所以结果是a==1     * ++i 先运算在赋值,例如 a=++i,先运算i=i+1,后赋值a=i,所以结果是a==2<pre><code class="hljs plain">例子：</code></pre>int i = 1;int j1 = i++; // 先将i的原始值（1）赋值给变量j1（1），然后i变量的值加1int j1 = ++i; // 先将i变量的值加1，然后将i的当前值（2）赋值给变量j1（2）</code></pre></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My first blog post</title>
    <link href="/2020/09/29/My%20first%20bolg%20post/"/>
    <url>/2020/09/29/My%20first%20bolg%20post/</url>
    
    <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>欢迎来参观我的博客，这里将记录我的大学生活以及学习的内容。</p>]]></content>
    
    
    
    <tags>
      
      <tag>learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
